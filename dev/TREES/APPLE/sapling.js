var TREE_SAPLING_GROUND_TILES = {	2: true,	3: true,	60: true};IDRegistry.genItemID("appleSapling");Item.createItem("appleSapling", "Apple Tree Sapling", {name: "appleSapling", data: 0});Item.registerUseFunction("appleSapling", function(coords, item, tile){	var place = coords.relative;	var tile1 = World.getBlock(place.x, place.y, place.z);	var tile2 = World.getBlock(place.x, place.y - 1, place.z);		if (GenerationUtils.isTransparentBlock(tile1.id) && TREE_SAPLING_GROUND_TILES[tile2.id]){		World.setBlock(place.x, place.y, place.z, BlockID.appleTreeSapling);		World.addTileEntity(place.x, place.y, place.z);		Player.setCarriedItem(item.id, item.count - 1, item.data);	}});IDRegistry.genItemID("appleMini");Item.createItem("appleMini", " Apple", {name: "applee", meta: 0} ,{isTech: false} );Item.registerUseFunction("appleMini", function(coords, item, tile){	var place = coords.relative;	World.setBlock(place.x,place.y,place.z,BlockID.appleBlock);	World.addTileEntity(place.x,place.y,place.z);});IDRegistry.genBlockID("appleTreeSapling");Block.createBlock("appleTreeSapling", [	{name: "Apple Tree Sapling", texture: [["empty", 0], ["empty", 0], ["empty", 0], ["empty", 0], ["empty", 0], ["empty", 0]], inCreative: false}]);Block.setBlockShape(BlockID.appleTreeSapling, {x: 0.001, y: 0.001, z: 0.001}, {x: 0.999, y: 0.1, z: 0.999});Block.registerDropFunction("appleTreeSapling", function(){	return [[ItemID.appleSapling, 1, 0]];});TileEntity.registerPrototype( BlockID.appleTreeSapling , {	defaultValues: {		size: 0,		growth: 0,		lastGrowth: 0	},	created: function(){		this.data.size = .85 + Math.random() * .25;	},		initAnimation: function(){		this.animation1 = new Animation.Item(this.x + .5, this.y + this.data.size / 2 - .02, this.z + .5);		this.animation2 = new Animation.Item(this.x + .5, this.y + this.data.size / 2 - .02, this.z + .5);		Harvest.animationSaplingSet( ItemID.appleSapling ,this.animation1,this.animation2);	},		destroyAnimation: function(){		if (this.animation1){			this.animation1.destroy();		}		if (this.animation2){			this.animation2.destroy();		}	},		updateAnimation: function(){		this.destroyAnimation();		this.initAnimation();	},		init: function(){		this.initAnimation();	},		destroy: function(){		this.destroyAnimation();	},		tick: function(){		if (World.getThreadTime() % 20 == 0){			this.data.growth += Math.random() * 2;			this.checkGrowth();			if (!TREE_SAPLING_GROUND_TILES[World.getBlockID(this.x, this.y - 1, this.z)]){				World.destroyBlock(this.x, this.y, this.z, true);				this.selfDestroy();			}		}	},		click: function(id, count, data){		if (id == 351 && data == 15){			this.data.growth += 256 + Math.random() * 128;			this.checkGrowth();			Player.setCarriedItem(id, count - 1, data);		}	},		checkGrowth: function(){		if (this.data.growth - 56 > this.data.lastGrowth){			this.data.size += (this.data.growth - this.data.lastGrowth) / 480;			this.data.lastGrowth = this.data.growth;			this.updateAnimation();		}		if (this.data.growth > 512){			this.selfDestroy();			Harvest.addTree(0,BlockID.appleBlock,4,this.x,this.y-1,this.z);		}	}});Callback.addCallback("PostLoaded", function(){	Recipes.addShaped({id: ItemID.appleSapling, count: 1, data: 0}, [		"yx",		"",		""	], ['x', 260,0,"y",6,0]);});